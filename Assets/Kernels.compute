// #include "SimplexNoise.hlsl"
#include "CurlNoise.hlsl"

uniform Texture2D Read;
uniform SamplerState samplerRead;

uniform RWTexture2D<float4> Write;

uniform float4 _Mouse;
uniform float2 _Time;
uniform float4 _Resolution;

#pragma kernel Seed
[numthreads(8,8,1)]
void Seed (uint2 id : SV_DispatchThreadID)
{

    float2 uv = id.xy / _Resolution.xy;
    float d = step(length(uv - _Mouse.xy), 0.1) * step(0.82, snoise(float3(uv * 100.0, _Time.x)));


    float4 buf = Read.SampleLevel(samplerRead, uv, 0);

    if (d > 0.1) {
        Write[id.xy] = saturate(buf + float4(d, 0.0, 0.0, 1.0));
    }
}


#pragma kernel Sim
[numthreads(8,8,1)]
void Sim (uint2 id : SV_DispatchThreadID)
{
    float2 uv = id.xy / _Resolution.xy;
    float4 buf = Read.SampleLevel(samplerRead, uv, 0);
    float2 texel = 1.0 / _Resolution;

    // float3 noise = snoise_grad(float2(uv * 2.0));
    float3 noise = curlNoise(float3(uv * 2.0, _Time.x * 0.2));

    float2 offsetUV = (uv + noise.yz * texel * 5.0);
    float4 s = Read.SampleLevel(samplerRead, offsetUV, 0);

    buf -= 0.01;
    s -= 0.003;
    // s -= 0.01;
    // s = 0;

    Write[id] = max(buf, s);
}
