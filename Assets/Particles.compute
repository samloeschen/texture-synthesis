#include "Common.hlsl"

uniform float _SensorAngle;
uniform float _TurnRate;
uniform float _SensorDist;
uniform float _MoveSpeed;

struct Particle {
    float2 position;
    float heading;
};

ConsumeStructuredBuffer<Particle> _ReadParticles;
AppendStructuredBuffer<Particle> _WriteParticles;

StructuredBuffer<int> _CounterBuf;
uniform int _MaxParticles;

#pragma kernel ParticleSeed
[numthreads(128,1,1)]
void ParticleSeed (uint id : SV_DispatchThreadID) {
    uint count = _CounterBuf[0];
    if (count + id >= _MaxParticles) {
        return;
    }
    Particle p;

    float2 offset = float2(
        rand(_Time + float(id)),
        rand(_Time + 1.0 + float(id))
    ) * 0.15;
    p.position = _Mouse + offset;
    p.heading = rand(_Time) * PI;
    _WriteParticles.Append(p);
}

Texture2D<float4> _ReadTexture;
SamplerState sampler_ReadTexture;
RWTexture2D<float4> _WriteTexture;

// returns 1 if color matches perfectly, 0 if color is equal to or further than dist threshold
float SampleField(float2 uv) {
    return _ReadTexture.SampleLevel(sampler_ReadTexture, uv, 0).r;
}


#pragma kernel ParticleSim
[numthreads(8,1,1)]
void ParticleSim (uint id: SV_DispatchThreadID) {
    int count = _CounterBuf[0];
    if (count - int(id) <= 0) {
        return;
    }
    Particle p = _ReadParticles.Consume();

    float2 texel = _Resolution.zw;
    float2 uv = p.position;

    // sensor directions
    float newHeading = p.heading;
    float2 forward = float2(cos(p.heading), sin(p.heading));
    float2 left    = float2(cos(p.heading + _SensorAngle), sin(p.heading + _SensorAngle));
    float2 right   = float2(cos(p.heading - _SensorAngle), sin(p.heading - _SensorAngle));

    float leftSample = SampleField(uv + left * texel * _SensorDist);
    float rightSample = SampleField(uv + right * texel * _SensorDist);
    float forwardSample = SampleField(uv + forward * texel * _SensorDist);

    if (rightSample > forwardSample && rightSample > leftSample) {
        newHeading = p.heading - _TurnRate;
    }
    if (leftSample > forwardSample && leftSample > rightSample) {
        newHeading = p.heading + _TurnRate;
    }
    if (leftSample > 0.8 && rightSample > 0.8) {
        newHeading = p.heading + lerp(-_TurnRate, _TurnRate, rand(_Time + float(id) > 0.5));
    }

    uint2 texPos = uint2(floor(p.position * _Resolution));
    _WriteTexture[texPos] = float4(1.0, 0.0, 0.0, 0.0);

    p.heading = newHeading;
    p.position += float2(cos(p.heading), sin(p.heading)) * _MoveSpeed;
    p.position = frac(p.position);
    _WriteParticles.Append(p);
}



